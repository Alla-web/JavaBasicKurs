package lesson_22.animals;

public class Cat extends Animal {

    // добавляем уникальный функционал Cat
    public void eat() {
        System.out.println("Cat eat");
    }
/*
ДИНАМИЧЕСКИЙ ПОЛИМОРФИЗМ - когда мы переназначаем поведение определённого объекта
путём призвоения ему в родительском методе собственного функционала
Переназначенный метод должен иметь туже самую сигнатуру (тип и название)
и тип возвращаемого методом значения
 */
    // ПЕРЕОПРЕДЕЛЕНИЕ родительского метода
    // переопредеоить поведение котика при вызове метода - voice -
    // для этого создаём такой же метод по типу, названию и возвращаемого значения
    // только со совим уникальным функционалом
    @Override // аннотация, которая перепроверяет сигнатуру переопределяемого метода
    public void voice(){
        System.out.println("Cat say MEOW!!!");
    }

    // ПЕРЕОПРЕДЕЛЕНИЕ родительского метода
    @Override
    public String toString() {
       return "Cat toString";
    }

    // перегрузка методов - это статический полиморфизм
    // взяли родительский метод, но добавили своё поведение
    public void voice(String str){
        System.out.println("Cat say " + str);
    }
}
